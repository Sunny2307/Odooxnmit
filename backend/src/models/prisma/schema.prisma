// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProjects Project[] @relation("ProjectCreator")
  projectMembers ProjectMember[]
  assignedTasks  Task[] @relation("TaskAssignee")
  messages       Message[]
  notifications  Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation("ProjectCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members ProjectMember[]
  tasks   Task[]
  messages Message[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member") // member, admin
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  assigneeId  String?
  dueDate     DateTime?
  status      String   @default("To-Do") // To-Do, In Progress, Done
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model Message {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  parentId  String?  // For threaded replies
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Message? @relation("MessageReplies", fields: [parentId], references: [id])
  replies Message[] @relation("MessageReplies")

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
